<a name="ConstrainoDelaunato"></a>

## ConstrainoDelaunato
ConstrainoDelaunato

**Kind**: global class  

* [ConstrainoDelaunato](#ConstrainoDelaunato)
    * [new ConstrainoDelaunato(coords, k, dist, distSelectionLimit)](#new_ConstrainoDelaunato_new)
    * [.coords2D](#ConstrainoDelaunato+coords2D) ⇒ <code>Array</code>
    * [.coords](#ConstrainoDelaunato+coords) ⇒ <code>Array</code>
    * [.triangles](#ConstrainoDelaunato+triangles) ⇒ <code>Array</code>
    * [.hull](#ConstrainoDelaunato+hull) ⇒ <code>Array</code>
    * [.delaunator](#ConstrainoDelaunato+delaunator) ⇒ <code>Object</code>
    * [.boundaries](#ConstrainoDelaunato+boundaries) ⇒ <code>Array</code>
    * [.holes](#ConstrainoDelaunato+holes) ⇒ <code>Array</code>
    * [.setTrianglesInsideBound(boundary)](#ConstrainoDelaunato+setTrianglesInsideBound)
    * [.update(point)](#ConstrainoDelaunato+update)

<a name="new_ConstrainoDelaunato_new"></a>

### new ConstrainoDelaunato(coords, k, dist, distSelectionLimit)
constructor

creates a delaunator object for the larger coord point cloud, and any smalle concave boundaries and delaunator objects for holes/boundaries supplied


| Param | Type | Description |
| --- | --- | --- |
| coords | <code>Array</code> | Coordinate cloud, can be 2D or 1D, prefer 1D of type [x0, y0, x1, y1, ... xN, yN] |
| k | <code>Integer</code> | lower bound for point selection in k grouping - minimum possible value is 3 - you have to make a polygon |
| dist | <code>Integer</code> | distance for adding points along boundary, distance between line segment perpindicular to either point of triangle segment; used for point interpolation along a boundary |
| distSelectionLimit | <code>Integer</code> | distance to limit selection of candidate points for concave boundary creation - useful if there is a whole on edge of points that is not being acknowledged by algorithm due to uniform point spacing or something like that; used during concave boundary creation |
| ...boundaries | <code>Array</code> | Point clouds of holes in coords, stored in array boundary for concave boundaries and boundedDelaunator for created delaunator objects |

<a name="ConstrainoDelaunato+coords2D"></a>

### constrainoDelaunato.coords2D ⇒ <code>Array</code>
coords2D

**Kind**: instance property of [<code>ConstrainoDelaunato</code>](#ConstrainoDelaunato)  
**Returns**: <code>Array</code> - 2D coordinate array  
<a name="ConstrainoDelaunato+coords"></a>

### constrainoDelaunato.coords ⇒ <code>Array</code>
coords

**Kind**: instance property of [<code>ConstrainoDelaunato</code>](#ConstrainoDelaunato)  
**Returns**: <code>Array</code> - 1D coordinate array  
<a name="ConstrainoDelaunato+triangles"></a>

### constrainoDelaunato.triangles ⇒ <code>Array</code>
triangles

**Kind**: instance property of [<code>ConstrainoDelaunato</code>](#ConstrainoDelaunato)  
**Returns**: <code>Array</code> - Index array of delaunator triangles  
<a name="ConstrainoDelaunato+hull"></a>

### constrainoDelaunato.hull ⇒ <code>Array</code>
hull

**Kind**: instance property of [<code>ConstrainoDelaunato</code>](#ConstrainoDelaunato)  
**Returns**: <code>Array</code> - Array of hull indices  
<a name="ConstrainoDelaunato+delaunator"></a>

### constrainoDelaunato.delaunator ⇒ <code>Object</code>
delaunator

**Kind**: instance property of [<code>ConstrainoDelaunato</code>](#ConstrainoDelaunato)  
**Returns**: <code>Object</code> - Return delaunator object for parent points  
<a name="ConstrainoDelaunato+boundaries"></a>

### constrainoDelaunato.boundaries ⇒ <code>Array</code>
boundaries

**Kind**: instance property of [<code>ConstrainoDelaunato</code>](#ConstrainoDelaunato)  
**Returns**: <code>Array</code> - concave boundary index array of parent points and hole points includes parent points as final array item  
<a name="ConstrainoDelaunato+holes"></a>

### constrainoDelaunato.holes ⇒ <code>Array</code>
holes

**Kind**: instance property of [<code>ConstrainoDelaunato</code>](#ConstrainoDelaunato)  
**Returns**: <code>Array</code> - Delaunator object array for all hole/boundary points supplied, includes parent points as final array item  
<a name="ConstrainoDelaunato+setTrianglesInsideBound"></a>

### constrainoDelaunato.setTrianglesInsideBound(boundary)
setTrianglesInsideBound

Function used to clip coords to inside of boundary or hole

**Kind**: instance method of [<code>ConstrainoDelaunato</code>](#ConstrainoDelaunato)  

| Param | Type | Description |
| --- | --- | --- |
| boundary | <code>BoundaryExtra</code> | boundary extra object |

<a name="ConstrainoDelaunato+update"></a>

### constrainoDelaunato.update(point)
update

**Kind**: instance method of [<code>ConstrainoDelaunato</code>](#ConstrainoDelaunato)  

| Param | Type | Description |
| --- | --- | --- |
| point | <code>Array</code> | x and y coord of point to add the delaunator object |

